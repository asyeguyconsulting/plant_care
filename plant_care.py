# -*- coding: utf-8 -*-
"""CropCarev1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sEzCF_x7fm_nzwDTws1C7v__BVSoNl1J
"""

import streamlit as st
from transformers import AutoImageProcessor, AutoModelForImageClassification
from PIL import Image
import torch
import matplotlib.pyplot as plt

# Set up the Streamlit app title and description
st.title("Plant Image Classification")
st.write("Upload an image to identify the plant using the Hugging Face model.")

# Load the model and the image processor
model_name = "umutbozdag/plant-identity"
processor = AutoImageProcessor.from_pretrained(model_name)
model = AutoModelForImageClassification.from_pretrained(model_name)

# Upload an image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Open the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image', use_column_width=True)

    # Preprocess the image
    inputs = processor(images=image, return_tensors="pt")

    # Move model and inputs to GPU if available
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    inputs = {k: v.to(device) for k, v in inputs.items()}

    # Perform inference
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits

    # Get the predicted class index
    predicted_class_idx = logits.argmax(-1).item()

    # Access the labels directly from the model
    labels = model.config.id2label
    predicted_label = labels[predicted_class_idx]

    # Display the result
    st.write(f"**Predicted Label:** {predicted_label}")

    # Display the image with the predicted label using matplotlib
    fig, ax = plt.subplots()
    ax.imshow(image)
    ax.set_title(f"Predicted Label: {predicted_label}", fontsize=16)
    ax.axis('off')
    st.pyplot(fig)



from transformers import AutoModelForImageClassification, AutoFeatureExtractor
from PIL import Image
import torch

# Load the model and feature extractor
model_name = "umutbozdag/plant-identity"
model = AutoModelForImageClassification.from_pretrained(model_name)
feature_extractor = AutoFeatureExtractor.from_pretrained(model_name)

def identify_plant(image):
    # Process the image
    inputs = feature_extractor(images=image, return_tensors="pt")
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        predicted_class_idx = logits.argmax(-1).item()

    # Map predicted index to plant name
    plant_name = model.config.id2label[predicted_class_idx]
    return plant_name

# Test the model with your own image
image_path = "path_to_your_image.jpg"  # Replace with the path to your image file
plant_name = identify_plant(image_path)
print(f"Identified Plant: {plant_name}")

